/* Generated by ReasonQL Compiler, PLEASE EDIT WITH CARE */

let query = {|
query AppQuery {
  viewer {
    todos  {
      id
      complete
      ...TodoData_todo
    }
    id
    totalCount
    completedCount
    ...TodoData_viewer
  }
}
fragment TodoData_todo on Todo {
  id
  complete
  text
}

fragment TodoData_viewer on User {
  id
  totalCount
  completedCount
}
|}

type todo = {
  id: string,
  complete: bool,
  f_todo: TodoData.todo,
};

type viewer = {
  todos: array(todo),
  id: string,
  totalCount: int,
  completedCount: int,
  f_viewer: TodoData.viewer,
};

type queryResult = {
  viewer: option(viewer),
};

type variablesType = Js.Dict.t(Js.Json.t);
let encodeVariables: variablesType => Js.Json.t = vars => Js.Json.object_(vars);

[%%raw {|
var decodeTodo = function (res) {
  return [
    res.id,
    res.complete,
    TodoData_decodeTodo(res),
  ]
}

var decodeViewer = function (res) {
  return [
    decodeTodoArray(res.todos),
    res.id,
    res.totalCount,
    res.completedCount,
    TodoData_decodeViewer(res),
  ]
}

var decodeQueryResult = function (res) {
  return [
    res.viewer ? decodeViewer(res.viewer) : undefined,
  ]
}

var decodeTodoArray = function (arr) {
  return arr.map(item =>
    item ? decodeTodo(item) : undefined
  )
}

var TodoData_decodeTodo = function (res) {
  return [
    res.id,
    res.complete,
    res.text,
  ]
}

var TodoData_decodeViewer = function (res) {
  return [
    res.id,
    res.totalCount,
    res.completedCount,
  ]
}
|}]

[@bs.val]external decodeQueryResultJs: Js.Json.t => queryResult = "decodeQueryResult";
let decodeQueryResult = decodeQueryResultJs;