/* Generated by ReasonQL Compiler, PLEASE EDIT WITH CARE */

/* Original Query
query AppQuery {
  featuredPosts @singular(name: "featuredPost") {
    slug
    ...FeaturedPostSummary_post
  }
  posts @singular(name:"post") {
    slug
    ...PostSummary_post
  }
}
fragment FeaturedPostSummary_post on Post {
  title
  slug
  summary
  content
  ...CommentSummary_post
}
fragment CommentSummary_post on Post {
  commentCount
}
fragment PostSummary_post on Post {
  title
  slug
  summary
  ...CommentSummary_post
}
*/
let query = {|query AppQuery{featuredPosts{slug
...F0}posts{slug
...F1}}fragment F0 on Post{title
slug
summary
content
...F2}fragment F2 on Post{commentCount}fragment F1 on Post{title
slug
summary
...F2}|}

type featuredPost = {
  slug: string,
  f_post: FeaturedPostSummary.post,
};

type post = {
  slug: string,
  f_post: PostSummary.post,
};

type queryResult = {
  featuredPosts: option(array(featuredPost)),
  posts: array(post),
};

type variablesType = Js.Dict.t(Js.Json.t);
let encodeVariables: variablesType => Js.Json.t = vars => Js.Json.object_(vars);

[%%raw {|
var decodeFeaturedPost = function (res) {
  return [
    res.slug,
    FeaturedPostSummary_decodePost(res),
  ]
}

var decodePost = function (res) {
  return [
    res.slug,
    PostSummary_decodePost(res),
  ]
}

var decodeQueryResult = function (res) {
  return [
    res.featuredPosts ? decodeFeaturedPostArray(res.featuredPosts) : undefined,
    decodePostArray(res.posts),
  ]
}

var decodeFeaturedPostArray = function (arr) {
  return arr.map(item =>
    item ? decodeFeaturedPost(item) : undefined
  )
}

var decodePostArray = function (arr) {
  return arr.map(item =>
    item ? decodePost(item) : undefined
  )
}

var FeaturedPostSummary_decodePost = function (res) {
  return [
    res.title,
    res.slug,
    res.summary,
    res.content,
    CommentSummary_decodePost(res),
  ]
}

var CommentSummary_decodePost = function (res) {
  return [
    res.commentCount,
  ]
}

var PostSummary_decodePost = function (res) {
  return [
    res.title,
    res.slug,
    res.summary,
    CommentSummary_decodePost(res),
  ]
}
|}]

[@bs.val]external decodeQueryResultJs: Js.Json.t => queryResult = "decodeQueryResult";
let decodeQueryResult = decodeQueryResultJs;