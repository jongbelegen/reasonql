/* Generated by ReasonQL Compiler, PLEASE EDIT WITH CARE */

let query = {|
query AppQuery {
  hero {
    name {
      first
      last
    }
    ship {
      name
    }
  }
  villain {
    name {
      first
    }
    ship  {
      name
    }
  }
}
|}

type hero_name_Name = {
  first: string,
  last: option(string),
};

type hero_ship_Ship = {
  name: string,
};

type hero = {
  name: hero_name_Name,
  ship: option(hero_ship_Ship),
};

type villain_name_Name = {
  first: string,
};

type villainShip = {
  name: string,
};

type villain = {
  name: villain_name_Name,
  ship: option(villainShip),
};

type queryResult = {
  hero: hero,
  villain: villain,
};

type variablesType = Js.Dict.t(Js.Json.t);
let encodeVariables: variablesType => Js.Json.t = vars => Js.Json.object_(vars);

[%%raw {|
var decodeHero_name_Name = function (res) {
  return [
    res.first,
    res.last,
  ]
}

var decodeHero_ship_Ship = function (res) {
  return [
    res.name,
  ]
}

var decodeHero = function (res) {
  return [
    decodeHero_name_Name(res.name),
    res.ship ? decodeHero_ship_Ship(res.ship) : undefined,
  ]
}

var decodeVillain_name_Name = function (res) {
  return [
    res.first,
  ]
}

var decodeVillainShip = function (res) {
  return [
    res.name,
  ]
}

var decodeVillain = function (res) {
  return [
    decodeVillain_name_Name(res.name),
    res.ship ? decodeVillainShip(res.ship) : undefined,
  ]
}

var decodeQueryResult = function (res) {
  return [
    decodeHero(res.hero),
    decodeVillain(res.villain),
  ]
}
|}]

[@bs.val]external decodeQueryResultJs: Js.Json.t => queryResult = "decodeQueryResult";
let decodeQueryResult = decodeQueryResultJs;