function generateReasonCode(node) {
  let {typeList, args} = node;
  return node.isFragment
    ? generateFragment(typeList)
    : generateQueryCode(node, typeList, args)
}

function generateFragment(typeList) {
  return `
${commentOnTop()}

${generateTypeCode(typeList)}
`.trim();
}

function generateQueryCode(node, typeList, args) {
  return `
${commentOnTop()}

let query = {|
${cleanCode(node.code)}
|}

${generateTypeCode(typeList)}

${generateVariablesEncoder(args)}

[%%raw {|
${node.codec}
|}]

[@bs.val]external decodeQueryResultJs: Js.Json.t => queryResult = "decodeQueryResult";
let decodeQueryResult = decodeQueryResultJs;
`.trim();
}

function commentOnTop() {
  return '/* Generated by ReasonQL Compiler, PLEASE EDIT WITH CARE */'
}

function cleanCode(code) {
  let result = code;
  let directives = [
    'singular',
    'reasontype',
  ]
  let re = new RegExp(`@(${directives.join('|')})\\(.+\\)`, 'g');
  result = result.replace(re, '');
  return result.trim();
}

function generateTypeCode(typeList) {
  return typeList.map(type => {    
    return (type.abstract ? `[@bs.deriving abstract]\n` : ``)
+ `type ${type.typeName} = {
${
  type.fields.map(field => {
    return `  ${field.name}: ${wrapTypeName(field)},`
  }).join('\n')
}
};
`.trim();
  }).join('\n\n');
}

function wrapTypeName(field) {
  let typeName = field.typeName;

  typeName = field.contentOption
    ? `option(${typeName})`
    : typeName;
  
  typeName = field.array
    ? `array(${typeName})`
    : typeName;

  return field.option? `option(${typeName})` : typeName;
}

function generateVariablesEncoder(args) {
  if(args.length > 0) {
    let variableArgs = generateVariablesArgs(args[0].fields);
    return `
${generateTypeCode(args)}

let encodeVariables: variablesType => queryVars = (vars) => queryVars(${variableArgs});
`.trim();
  } else {
    return `
type variablesType = Js.Dict.t(Js.Json.t);
let encodeVariables: variablesType => Js.Json.t = vars => Js.Json.object_(vars);
`.trim();
  }
}

function generateVariablesArgs(fields) {
  return fields.map(field => `~${field.name}=vars.${field.name}`).join(',')
}

exports.generateReasonCode = generateReasonCode;