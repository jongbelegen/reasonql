function commentOnTop() {
  return '/* Generated by ReasonQL Compiler, PLEASE EDIT WITH CARE */'
}

function getValidTypeName(typeInfo, typeName) {
  if(isScalar(typeName)) {
    let typeNames = {
      "ID": "string",
      "String": "string",
      "Boolean": "bool",
      "Int": "int",
      "Float": "float",
    };

    return typeNames[typeName];
  } else if(isFragmentTypeName(typeName)) {
    return typeName;
  } else {
    let {selectionName, userDefinedTypeName} = typeInfo.map[typeName];
    let name = 
      userDefinedTypeName 
        ? userDefinedTypeName
        : typeInfo.unconflictedNames.includes(selectionName)
          ? selectionName
          : typeName

    let rootNames = ["Query", "Mutation", "Subscription"];
    name = rootNames.includes(name) ? name + "Result" : name;

    return lowerTheFirstCharacter(name);
  }
}

function lowerTheFirstCharacter(name) {
  return name[0].toLowerCase() + name.substring(1);
}

function upperTheFirstCharacter(name) {
  return name[0].toUpperCase() + name.substring(1);
}

function isScalar(type) {
  let scalarTypes = ["ID", "String", "Int", "Float", "Boolean"];
  return scalarTypes.includes(type);
}

function isFragmentTypeName(type) {
  return type.includes(".");
}

module.exports = {
  commentOnTop,
  getValidTypeName,
  lowerTheFirstCharacter,
  upperTheFirstCharacter,
  isScalar,
  isFragmentTypeName,
}
